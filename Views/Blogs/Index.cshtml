@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager


@model BlogApp.Models.ViewModels.BlogDetailsViewModels
@{
    ViewData["Title"] = Model.PageTitle;
}
<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-8">
            @if (Model != null)
            {
                <h1 class="mb-3">@Model.Heading</h1>
                <div class="d-flex justify-content-between mb-3">
                    <span class="text-secondary">@Model.Author</span>
                    <span class="text-secondary">@Model.PublishedDate.ToShortDateString()</span>
                </div>
                <div class="mb-3">
                    @if (SignInManager.IsSignedIn(User))
                    {
                        if (Model.Liked)
                        {
                            <a style="cursor:pointer;"><i class="bi bi-heart-fill"></i></a>

                        }
                        else
                        {
                            <a id="btnLike" style="cursor:pointer;"><i class="bi bi-heart"></i></a>

                        }

                    }
                    <pre><span id="totalLikes">@Model.TotalLikes</span> likes</pre>
                </div>
                <div class="d-flex mb-3">
                    @foreach (var tag in Model.Tags)
                    {
                        <span class="badge bg-secondary ms-1">@tag.DisplayName</span>
                    }
                </div>
                <img src="@Model.FeaturedImageUrl" alt="No Image Found" class="d-block img-fluid mb-3" />
                <div class="mb-3 blog-content">
                    @Html.Raw(Model.Content)
                </div>
                <hr />
                @* <div class="container-lg"> *@
                <div class="container-fluid p-0">
                    <h5 class="mb-3">Comments</h5>
                    @if (Model.Comments != null && Model.Comments.Any())
                    {
                        @foreach (var comment in Model.Comments)
                        {
                            <div class="card mb-3">
                                <div class="d-flex bg-success justify-content-between">
                                    <span class="text-light ms-2">@comment.Username</span>
                                    <div class="text-light me-2 d-flex">
                                        <div>@comment.Date.ToShortDateString()</div>
                                        @if (comment.Username == UserManager.GetUserName(User))
                                        {
                                            <div class="dropdown">
                                                <a class="text-light" role="button" data-bs-toggle="dropdown"
                                                    aria-expanded="false">
                                                    <i class="bi bi-three-dots-vertical"></i>
                                                </a>
                                                <ul class="dropdown-menu">
                                                    @* <li><a class="dropdown-item" asp-area="" asp-controller="AdminTags"
                                                            asp-action="Add">Edit</a></li> *@
                                                    <li> <a class="dropdown-item" asp-action="DeleteComment" asp-controller="Blogs"
                                                            asp-route-commentDesc="@comment.Description" asp-route-commentDate="@comment.Date" asp-route-userId="@UserManager.GetUserId(User)"
                                                            asp-route-blogId="@Model.Id" asp-route-urlHandle="@Model.UrlHandle">Delete</a></li>

                                                </ul>
                                            </div>


                                        }
                                    </div>

                                </div>
                                <div class="card-body">
                                    @comment.Description
                                </div>

                            </div>

                        }

                    }
                </div>
                <hr />
                <div class="container-fluid p-0">
                    <h5>Add Comment</h5>
                    @if (SignInManager.IsSignedIn(User))
                    {
                        <form method='post'>
                            <div class="mb-3">
                                <label for="desc" class="form-label">Comment Description</label>
                                <input type="text" class="form-control" asp-for="@Model.CommentDescription" />
                            </div>
                            <div class="mb-3">
                                <button type="submit" class="btn btn-success">Submit</button>
                                <input type="text" asp-for="@Model.Id" hidden />
                                <input type="text" asp-for="@Model.UrlHandle" hidden />

                            </div>
                        </form>
                    }
                </div>

                @* </div> *@

            }
            else
            {
                <p>Blog post not found</p>
            }
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        const btn = document.getElementById('btnLike');
        const numLikes = document.getElementById('totalLikes');

        async function getTotalLikes() {

            await fetch('api/BlogPostLike/@Model.Id/totalLikes', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                }
            })
                .then(response => response.json())
                .then((res) => {
                    console.log(res);
                    numLikes.innerText = res;
                });
        }

        async function addLikeForBlog() {

            await fetch('api/BlogPostLike/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
                body: JSON.stringify({
                    blogPostId: '@Model.Id',
                    userId: '@UserManager.GetUserId(User)'
                })
            })
                .then(() => {
                    btn.innerHTML = `<i class="bi bi-heart-fill"></i>`;
                    btn.removeEventListener('click', addLikeForBlog);
                    getTotalLikes();
                });

        }

        btn.addEventListener('click', addLikeForBlog);
    </script>
}